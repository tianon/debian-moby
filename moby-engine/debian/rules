#!/usr/bin/make -f

# prefer Go 1.17
export PATH := /usr/lib/go-1.17/bin:$(PATH)

# temporary build path (see http://golang.org/doc/code.html#GOPATH)
OUR_GOPATH := $(CURDIR)/.gopath
export GOPATH := $(OUR_GOPATH)
# circumvent a few problematic (for Debian) Go features inspired by dh-golang
export GOCACHE := $(OUR_GOPATH)/.cache
export GOPROXY := off
export GO111MODULE := off
export GOFLAGS := -trimpath

include /usr/share/dpkg/pkg-info.mk

export VERSION := $(DEB_VERSION_UPSTREAM)
export DOCKER_GITCOMMIT := $(DEB_VERSION_UPSTREAM_REVISION)

export DOCKER_BUILDTAGS := apparmor seccomp selinux

ifneq (,$(filter parallel=%, $(DEB_BUILD_OPTIONS)))
	NUMJOBS := $(patsubst parallel=%, %, $(filter parallel=%, $(DEB_BUILD_OPTIONS)))
	MAKEFLAGS += -j '$(NUMJOBS)'
endif

override_dh_auto_configure:
	# set up GOPATH symlink farm
	# libnetwork
	mkdir -p '$(OUR_GOPATH)/src/github.com/docker'
	ln -sfT '$(CURDIR)/libnetwork' '$(OUR_GOPATH)/src/github.com/docker/libnetwork'
	# engine
	mkdir -p '$(OUR_GOPATH)/src/github.com/docker'
	ln -sfT '$(CURDIR)' '$(OUR_GOPATH)/src/github.com/docker/docker'

# using separate build targets to allow for parallelism during build
override_dh_auto_build: _build-tini _build-proxy _build-engine
	@#

_build-tini: # (docker-init)
	mkdir -p tini/build
	cd tini/build \
		&& cmake .. \
		&& make tini-static

_build-proxy: # (from libnetwork)
	go build \
		-o libnetwork/docker-proxy \
		github.com/docker/libnetwork/cmd/proxy

_build-engine:
	PRODUCT=docker ./hack/make.sh dynbinary

# basic smoke test to ensure binaries built successfully
# (especially since their tests are *really* involved)
override_dh_auto_test:
	# tini
	./tini/build/tini-static --version
	# engine
	./bundles/dynbinary-daemon/dockerd --version

override_dh_installsystemd:
	dh_installsystemd --name=docker

override_dh_installudev:
	dh_installudev --priority=z80

override_dh_install:
	dh_install
	dh_apparmor --profile-name=moby-engine -pmoby-engine

override_dh_shlibdeps:
	dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info

override_dh_auto_install:
	@# stop debhelper from doing "make install"
	@# (we use dh_install / dh-exec for installing files where they need to be)

override_dh_auto_clean:
	@# stop debhelper from doing "make clean"

%:
	dh $@
